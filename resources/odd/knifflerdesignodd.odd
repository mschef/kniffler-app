<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en"><teiHeader><fileDesc>
            <titleStmt><title>Kniffler TEI Publisher ODD
                    
                  
                  
                   
                           
                     <desc>Diese ODD steuert die Anzeige
                        von TEI-Code in der TEI-Publisher-Präsentationsumgebung der
                        Kniffler-Edition. ,This ODD governs the rendering of TEI code in the Kniffler
                        TEI Publisher application</desc></title></titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under
                        GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions
                            GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify it under
                        the terms of the GNU General Public License as published by the Free
                        Software Foundation, either version 3 of the License, or (at your option)
                        any later version.</p>
                    <p>This program is distributed in the hope that it will be useful, but WITHOUT
                        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
                        FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
                        more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc><encodingDesc><tagsDecl><rendition source="knifflerbasis_style.css"/></tagsDecl></encodingDesc><revisionDesc>
            <change when="2020-06-08+02:00">Initial version</change>
        </revisionDesc></teiHeader><text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="Herumspielen" source="teipublisher.odd">
                <elementSpec ident="emph" mode="add"/>
                <elementSpec ident="title" mode="change"><model output="web" predicate="$parameters?mode='footer' and not(@type)" behaviour="inline">
            <param name="letterTitle" value="."/>
            <param name="fileName" value="parent::*/title[@type]/text()"/>
            <pb:template xmlns="" xml:space="preserve"><span>Zitation:
  [[letterTitle]]. In: Internationale Geschäftskorrespondenz von L. Kniffler &amp; Co. (1859-1876). Ruhr-Universität Bochum, Fakultät für Ostasienwissenschaften, Geschichte Japans. https://kniffler.ub.rub.de/exist/apps/Kniffler/[[fileName]]</span></pb:template>
            <outputRendition xml:space="preserve">
            font-size:9pt
            </outputRendition>
        </model><model predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
        </model><modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence><model predicate="not(@level) and parent::bibl" behaviour="inline"/><modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence><modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence><modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence><model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model></elementSpec>
                <elementSpec ident="dateline" mode="change"/>
                <elementSpec ident="date" mode="change"><model output="print" predicate="text()" behaviour="inline"/><model output="print" predicate="@when and not(text())" behaviour="inline">
            <param name="content" value="@when"/>
        </model><model output="web" predicate="@when and matches(@when, '^[0-9]{4}$')" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="@when"/>
        </model><model output="web" predicate="@when and matches(@when, '^[0-9]{4}\-[0-9]{2}$')" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="format-date(concat(@when, '-01'),'[MNn] [Y]', 'de', (), ())"/>
        </model><model output="web" predicate="@when and matches(@when, '^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$')" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="format-date(@when,'[FNn], [D1o] [MNn] [Y]', 'de', (), ())"/>
        </model><model predicate="text()" behaviour="inline"/></elementSpec>
                <elementSpec ident="persName" mode="add"><model predicate="parent::person" behaviour="inline" cssClass="persName_popup"/><model behaviour="alternate" cssClass="persName_style">
            <param name="default" value="."/>
            <param name="alternate" value="id(@ref, fn:doc('/db/apps/Kniffler/data/register/KnifflerPersonenregisterDat.xml'))"/>
        </model></elementSpec>
                <elementSpec ident="person" mode="add"><modelSequence>
            <model behaviour="block">
                <desc>Name</desc>
                <param name="content" value="persName"/>
            </model>
            <model predicate="./birth/date/@when and matches(./birth/date/@when, '^[0-9]{4}$')" behaviour="block">
                <desc>Geburtsjahr und -ort</desc>
                <param name="dateBirthYear" value="('* ', ./birth/date/@when)"/>
                <param name="placeBirthYear" value="if (./birth/placeName) then (' in ', ./birth/placeName) else ''"/>
                <pb:template xmlns="" xml:space="preserve">[[dateBirthYear]] [[placeBirthYear]]</pb:template>
            </model>
            <model predicate="./birth/date/@when and matches(./birth/date/@when, '^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$')" behaviour="block">
                <desc>Geburtdatum und -ort</desc>
                <param name="dateBirthDay" value="('* ', ./birth/date/@when/(format-date(.,'[D,2].[M,2].[Y]')))"/>
                <param name="placeBirthDay" value="if (./birth/placeName) then (' in ', ./birth/placeName) else ''"/>
                <pb:template xmlns="" xml:space="preserve">[[dateBirthDay]] [[placeBirthDay]]</pb:template>
            </model>
            <model predicate="./death/date/@when and matches(./death/date/@when, '^[0-9]{4}$')" behaviour="block">
                <desc>Todesjahr und Sterbeort</desc>
                <param name="dateDeathYear" value="('&amp;#x2020; ',./death/date/@when)"/>
                <param name="placeDeathYear" value="if (./death/placeName) then (' in ', ./death/placeName) else ''"/>
                <pb:template xmlns="" xml:space="preserve">[[dateDeathYear]] [[placeDeathYear]]</pb:template>
            </model>
            <model predicate="./death/date/@when and matches(./death/date/@when, '^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$')" behaviour="block">
                <desc>Todestag und Sterbeort</desc>
                <param name="dateDeathDay" value="('&amp;#x2020; ', ./death/date/@when/(format-date(.,'[D,2].[M,2].[Y]')))"/>
                <param name="placeDeathDay" value="if (./death/placeName) then (' in ', ./death/placeName) else ''"/>
                <pb:template xmlns="" xml:space="preserve">[[dateDeathDay]] [[placeDeathDay]]</pb:template>
            </model>
            <model behaviour="block">
                <desc>Eintrag</desc>
                <param name="content" value="note"/>
            </model>
            <model predicate="not(@ref)" behaviour="block">
                <desc>Quellenangaben Literatur</desc>
                <param name="content" value="./bibl"/>
            </model>
            <model predicate="@ref" behaviour="link">
                <desc>Quellenangaben Online</desc>
                <param name="content" value="bibl"/>
            </model>
        </modelSequence></elementSpec>
                <elementSpec ident="note" mode="change"><model predicate="parent::org" behaviour="block"/><model predicate="parent::place" behaviour="block"/><model predicate="parent::item" behaviour="block"/><model predicate="parent::person" behaviour="block">
            <param name="content" value="."/>
        </model><model behaviour="note"/></elementSpec>
                <elementSpec ident="idno" mode="add"/>
                <elementSpec ident="graphic" mode="change"/>
                <elementSpec ident="teiHeader" mode="change"><model predicate="$parameters?mode='commentary'" behaviour="block">
            <desc>Display metadata in collapsible drawer</desc>
            <param name="title" value=".//title[not(@type)]"/>
            <param name="sender" value="if (.//correspAction[@type='sent']/persName) then concat (.//correspAction[@type='sent']/persName, ' ','(', .//correspAction[@type='sent']/orgName,')',' in ', .//correspAction[@type='sent']/settlement) else concat (.//correspAction[@type='sent']/orgName, ' in ', .//correspAction[@type='sent']/settlement)"/>
            <param name="addressee" value="if (.//correspAction[@type='received']/persName) then concat (.//correspAction[@type='received']/persName, ' ','(', .//correspAction[@type='received']/orgName,')',' in ', .//correspAction[@type='received']/settlement) else concat (.//correspAction[@type='received']/orgName, ' in ', .//correspAction[@type='received']/settlement)"/>
            <param name="sources" value="concat (.//msIdentifier/repository,', ', .//msIdentifier/idno, ', ', .//msIdentifier/settlement)"/>
            <param name="editors" value=".//editor[not(@role='translator')]"/>
            <param name="physDesc" value=".//physDesc"/>
            <param name="sent" value="format-date(.//correspAction[@type='sent']/date/@when,'[FNn], [D1o] [MNn] [Y]', 'de', (), ()) "/>
            <param name="received" value="format-date(.//correspAction[@type='received']/date/@when,'[FNn], [D1o] [MNn] [Y]', 'de', (), ()) "/>
            <param name="langTestDe" value="if (.//langUsage/language[@ident='de-DE']) then 'langs.de' else ' '"/>
            <param name="langTestEn" value="if (.//langUsage/language[@ident='en-EN']) then 'langs.en' else ' '"/>
            <param name="translator" value=".//editor[@role='translator']"/>
            <param name="langTestFr" value="if (.//langUsage/language[@ident='fr-FR']) then 'langs.fr' else ' '"/>
            <param name="langTestNl" value="if (.//langUsage/language[@ident='nl-NL']) then 'langs.nl' else ' '"/>
            <pb:template xmlns="" xml:space="preserve"><div>
  <h3><pb-i18n key="metadata.title">Title</pb-i18n></h3>
  [[title]]
  <h3><pb-i18n key="metadata.edition">Editors</pb-i18n></h3>
  [[editors]]
  <h3><pb-i18n key="metadata.translation">Translation</pb-i18n></h3>
  [[translator]]
  <h3><pb-i18n key="metadata.sender">Sender</pb-i18n></h3>
  [[sender]]
  <h3><pb-i18n key="metadata.datesent">Date sent</pb-i18n></h3>
  [[sent]]
  <h3><pb-i18n key="metadata.addressee">Addressee</pb-i18n></h3>
  [[addressee]]
  <h3><pb-i18n key="metadata.datereceived">Date received</pb-i18n></h3>
  [[received]]
  <h3><pb-i18n key="metadata.repository">Repository</pb-i18n></h3>
[[sources]]
<h3><pb-i18n key="metadata.physicaldesc">Physical description</pb-i18n></h3>
[[physDesc]]
  <h3><pb-i18n key="metadata.sourcelang">Source language</pb-i18n></h3>
  <pb-i18n key="[[langTestDe]]"/> 
  <pb-i18n key="[[langTestEn]]"/> 
  <pb-i18n key="[[langTestFr]]"/> 
  <pb-i18n key="[[langTestNl]]"/>
</div></pb:template>
        </model></elementSpec>
                <elementSpec ident="pb" mode="change"><modelSequence>
            <model behaviour="inline">
                <param name="content" value="."/>
            </model>
            <model behaviour="break" cssClass="pageNo" useSourceRendition="true">
                <param name="type" value="'page'"/>
                <param name="label" value="@n"/>
                <outputRendition xml:space="preserve" scope="before">
                content: '[Page ';
                </outputRendition>
                <outputRendition xml:space="preserve" scope="after">
                content: ']';
                </outputRendition>
            </model>
            <model predicate="@facs" behaviour="inline">
                <param name="url" value="@facs"/>
                <pb:template xmlns="" xml:space="preserve">
								<pb-facs-link facs="[[url]]" emit="transcription"/>
							</pb:template>
            </model>
        </modelSequence></elementSpec>
                <elementSpec ident="stamp" mode="change"><modelSequence predicate="@type='postal'">
            <model predicate="@style='round'" behaviour="alternate" cssClass="poststamp_round">
                <param name="default" value="'Poststempel'"/>
                <param name="alternate" value="."/>
            </model>
            <model predicate="@style='rectangular'" behaviour="alternate" cssClass="poststamp_rect">
                <param name="default" value="'Poststempel'"/>
                <param name="alternate" value="."/>
            </model>
            <model predicate="@style='oval'" behaviour="alternate" cssClass="poststamp_oval">
                <param name="default" value="'Poststempel'"/>
                <param name="alternate" value="."/>
            </model>
        </modelSequence><modelSequence predicate="@type='commercial'">
            <model predicate="@style='round'" behaviour="alternate" cssClass="commstamp_round">
                <param name="default" value="'Firmenstempel'"/>
                <param name="alternate" value="."/>
            </model>
            <model predicate="@style='rectangular'" behaviour="alternate" cssClass="commstamp_rect">
                <param name="default" value="'Firmenstempel'"/>
                <param name="alternate" value="."/>
            </model>
            <model predicate="@style='oval'" behaviour="alternate" cssClass="commstamp_oval">
                <param name="default" value="'Firmenstempel'"/>
                <param name="alternate" value="."/>
            </model>
        </modelSequence></elementSpec>
                <elementSpec ident="seg" mode="change"><modelSequence>
            <desc>Textausrichtung der Grundlegenden Segmente</desc>
            <model predicate="@rend=&#34;center&#34;" behaviour="inline" cssClass="seg_center"/>
            <model predicate="@rend=&#34;left&#34;" behaviour="inline" cssClass="seg_left"/>
            <model predicate="@rend=&#34;right&#34;" behaviour="inline" cssClass="seg_right"/>
        </modelSequence></elementSpec>
                <elementSpec ident="hi" mode="change"><modelSequence>
            <desc>Textgestaltung durch die Highlighting Elemente</desc>
            <model predicate="@rend='code'" behaviour="inline" cssClass="hi_print"/>
            <model predicate="@rend='print'" behaviour="inline" cssClass="hi_print"/>
            <model predicate="@rend='underlineDashed'" behaviour="inline" cssClass="hi_underlineDashed"/>
            <model predicate="@rend='underline'" behaviour="inline" cssClass="hi_underline"/>
            <model predicate="@rend='superscript'" behaviour="inline" cssClass="hi_super"/>
            <model predicate="@rend='latintype'" behaviour="inline" cssClass="hi_latin"/>
            <model predicate="@rend=&#34;bold&#34;" behaviour="inline">
                <outputRendition xml:space="preserve">
                font-weight: bold;
                </outputRendition>
            </model>
            <model predicate="@rend=&#34;italic&#34;" behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style:italic;
                </outputRendition>
            </model>
            <model predicate="@rend=&#34;italic superscript&#34;" behaviour="inline">
                <param name="itSupText" value="."/>
                <pb:template xmlns="" xml:space="preserve"><sup>[[itSupText]]</sup></pb:template>
                <outputRendition xml:space="preserve">
                font-style:italic;
                </outputRendition>
            </model>
        </modelSequence></elementSpec>
                <elementSpec ident="term" mode="add"><model predicate="parent::item" behaviour="block" cssClass="term_popup"/><model behaviour="alternate" cssClass="term_style">
            <param name="default" value="."/>
            <param name="alternate" value="id(@ref, fn:doc('/db/apps/Kniffler/data/register/WarenUndSachregisterDat.xml'))"/>
        </model></elementSpec>
                <elementSpec ident="item" mode="change"><modelSequence predicate="parent::list">
            <model behaviour="block">
                <param name="content" value="term|name"/>
            </model>
            <model behaviour="inline">
                <param name="content" value="note"/>
            </model>
            <model behaviour="block" cssClass="bibl_style">
                <param name="content" value="bibl"/>
            </model>
        </modelSequence></elementSpec>
                <elementSpec ident="bibl" mode="change"><model predicate="parent::sourceDesc and @xml:lang" behaviour="block">
            <param name="content" value="parent::sourceDesc/bibl[@xml:lang=$parameters?language]"/>
            <param name="lang" value="@xml:lang"/>
            <pb:template xmlns="" xml:space="preserve"><span lang="[[lang]]">[[content]]</span></pb:template>
            <outputRendition xml:space="preserve">
            font-size:10pt
            </outputRendition>
        </model><model predicate="@source" behaviour="link" cssClass="bibl_style">
            <param name="uri" value="@source"/>
            <param name="target" value="&#34;_blank&#34;"/>
        </model><model predicate="parent::listBibl" behaviour="listItem"/><model predicate="not(@xml:lang)" behaviour="block" cssClass="bibl_style"/></elementSpec>
                <elementSpec ident="placeName" mode="change"><model predicate="parent::place" behaviour="link" cssClass="bibl_style">
            <desc>Placename für die Gestaltung des Popups</desc>
            <param name="uri" value="@ref"/>
            <param name="target" value="&#34;_blank&#34;"/>
        </model><model behaviour="alternate" cssClass="placeName_style">
            <param name="default" value="."/>
            <param name="alternate" value="id(@ref, fn:doc('/db/apps/Kniffler/data/register/OrtsregisterDat.xml'))"/>
        </model><model predicate="ancestor::person" behaviour="link">
            <param name="uri" value="@ref"/>
        </model></elementSpec>
                <elementSpec ident="place" mode="add"><modelSequence predicate="parent::listPlace">
            <desc>Aufbau der Ausgabe des Popups für Ortsnamen</desc>
            <model behaviour="block" cssClass="placeName_popup">
                <desc>Überschrift</desc>
                <param name="content" value="placeName/data()"/>
            </model>
            <model behaviour="block">
                <desc>Eintrag</desc>
                <param name="content" value="note"/>
            </model>
            <model predicate="not(@ref)" behaviour="block" cssClass="bibl_style">
                <desc>Quellenangaben</desc>
                <param name="content" value="bibl"/>
            </model>
            <model predicate="@ref" behaviour="link">
                <desc>Quellenangaben mit Link</desc>
                <param name="content" value="@ref"/>
            </model>
            <model behaviour="link" cssClass="bibl_style">
                <desc>Ausgabe des Ortes bei Geonames</desc>
                <param name="uri" value="placeName/@ref"/>
                <param name="content" value="concat(placeName, ' Eintrag auf Geonames')"/>
                <param name="target" value="&#34;_blank&#34;"/>
            </model>
        </modelSequence></elementSpec>
                <elementSpec ident="name" mode="change"><model predicate="parent::item" behaviour="block" cssClass="term_popup"/><model output="web" predicate="@type='ship'" behaviour="alternate" cssClass="term_style">
            <desc>Popup für Schiffe</desc>
            <param name="default" value="."/>
            <param name="alternate" value="id(@ref, fn:doc('/db/apps/Kniffler/data/register/WarenUndSachregisterDat.xml'))"/>
        </model></elementSpec>
                <elementSpec ident="orgName" mode="add"><model output="web" behaviour="alternate" cssClass="persName_style">
            <desc>Gestaltung der Organisation und Verknüpfung mit dem Register</desc>
            <param name="default" value="."/>
            <param name="alternate" value="id(@ref, fn:doc('/db/apps/Kniffler/data/register/KnifflerFirmenregisterDat.xml'))"/>
        </model></elementSpec>
                <elementSpec ident="org" mode="add"><modelSequence output="web" predicate="parent::listOrg">
            <desc>Ausgabe für das Popup aus dem Firmenregister</desc>
            <model predicate="@ref" behaviour="link" cssClass="bibl_style">
                <desc>Quellenangaben Online</desc>
                <param name="content" value="bibl"/>
            </model>
            <model behaviour="block" cssClass="persName_popup">
                <desc>Überschrift</desc>
                <param name="content" value="orgName/data()"/>
            </model>
            <model behaviour="block" cssClass="settlement_style">
                <param name="content" value="settlement"/>
            </model>
            <model output="web" behaviour="block">
                <desc>Eintrag</desc>
                <param name="content" value="note"/>
            </model>
            <model predicate="not(@ref)" behaviour="block" cssClass="bibl_style">
                <desc>Quellenangaben</desc>
                <param name="content" value="./bibl"/>
            </model>
        </modelSequence></elementSpec>
                <elementSpec ident="choice" mode="change"><model predicate="abbr and expan" behaviour="alternate">
            <param name="default" value="abbr[1]"/>
            <param name="alternate" value="expan[1]"/>
        </model></elementSpec>
                <elementSpec ident="add" mode="change"><model predicate="@style=&#34;writingMode: vertical-lr; textOrientation: sideways-right&#34;" behaviour="list" cssClass="add"/><model predicate="style=&#34;writingMode: vertical-lr; textOrientation: sideways-left&#34;" behaviour="list" cssClass="add"/><model behaviour="inline" cssClass="add"/><model predicate="@place='above'" behaviour="inline" cssClass="add hi_super"/></elementSpec>
                <elementSpec ident="titleStmt" mode="change"><model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model><model output="fo" behaviour="heading"/><model predicate="$parameters?mode='title'" behaviour="heading">
            <param name="content" value="title[not=@type]"/>
            <param name="level" value="5"/>
        </model><modelSequence output="web" predicate="$parameters?header='short'">
            <model behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="$parameters?doc"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="author"/>
            </model>
        </modelSequence><model output="web" behaviour="block"/></elementSpec>
                <elementSpec ident="sourceDesc" mode="add"/>
                <elementSpec ident="editor" mode="change"><model behaviour="inline"/><model behaviour="inline"/></elementSpec>
                <elementSpec ident="correspAction" mode="add"/>
                <elementSpec ident="figure" mode="change"><model behaviour="block"/></elementSpec>
                <elementSpec ident="figDesc" mode="change"><model predicate="parent::figure" behaviour="block" cssClass="figDesc_inline">
            <outputRendition xml:space="preserve" scope="before">
            content: '[..';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '..]';
            </outputRendition>
        </model></elementSpec>
                <elementSpec ident="head" mode="change"><model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model><model predicate="parent::table" behaviour="block" cssClass="hi_latin"/><model predicate="parent::list" behaviour="block" cssClass="listHead"/><model predicate="parent::div" behaviour="heading">
            <param name="level" value="count(ancestor::div)"/>
        </model><model behaviour="block"/></elementSpec>
                <elementSpec ident="settlement" mode="add"/>
                <elementSpec ident="listPerson" mode="add"><model behaviour="list">
            <desc>Personenregister alphabetisch ordnen</desc>
            <param name="content" value="for $person in ./person order by $person/persName/surname return $person"/>
        </model></elementSpec>
                <elementSpec ident="list" mode="change"><model behaviour="list">
            <desc>Waren- und Sachregister alphabetisch ordnen</desc>
            <param name="content" value="for $item in ./item order by $item/*[1], $item/term return $item"/>
        </model></elementSpec>
                <elementSpec ident="listPlace" mode="add"><model behaviour="list">
            <desc>Ortsregister alphabetisch ordnen</desc>
            <param name="content" value="for $place in ./place order by $place/placeName return $place"/>
        </model></elementSpec>
                <elementSpec ident="listOrg" mode="add"><model behaviour="list">
            <desc>Organisationenregister alphabetisch ordnen</desc>
            <param name="content" value="for $org in ./org order by $org/orgName return $org"/>
        </model></elementSpec>
            <elementSpec ident="div" mode="change"><model predicate="parent::body and @xml:lang" behaviour="body">
            <param name="lang" value="@xml:lang"/>
            <param name="content" value="parent::body/div[@xml:lang=$parameters?language]"/>
            <pb:template xmlns="" xml:space="preserve"><div lang="[[lang]]">[[content]]</div></pb:template>
        </model><model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model><model predicate="parent::body or parent::front or parent::back" behaviour="section"/></elementSpec><elementSpec ident="body" mode="change"/><elementSpec ident="author" mode="change"><model predicate="ancestor::teiHeader" behaviour="block">
            <param name="content" value="parent::titleStmt//author"/>
            <outputRendition xml:space="preserve">
            
            </outputRendition>
        </model><model behaviour="inline"/></elementSpec></schemaSpec>
        </body>
    </text></TEI>